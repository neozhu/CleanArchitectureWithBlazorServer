<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
      Microsoft ResX Schema 
      
      Version 2.0
      
      The primary goals of this format is to allow a simple XML format 
      that is mostly human readable. The generation and parsing of the 
      various data types are done through the TypeConverter classes 
      associated with the data types.
      
      Example:
      
      ... ado.net/XML headers & schema ...
      <resheader name="resmimetype">text/microsoft-resx</resheader>
      <resheader name="version">2.0</resheader>
      <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
      <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
      <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
      <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
      <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
          <value>[base64 mime encoded serialized .NET Framework object]</value>
      </data>
      <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
          <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
          <comment>This is a comment</comment>
      </data>
                  
      There are any number of "resheader" rows that contain simple 
      name/value pairs.
      
      Each data row contains a name, and value. The row also contains a 
      type or mimetype. Type corresponds to a .NET class that support 
      text/value conversion through the TypeConverter architecture. 
      Classes that don't support this are serialized and stored with the 
      mimetype set.
      
      The mimetype is used for serialized objects, and tells the 
      ResXResourceReader how to depersist the object. This is currently not 
      extensible. For a given mimetype the value must be set accordingly:
      
      Note - application/x-microsoft.net.object.binary.base64 is the format 
      that the ResXResourceWriter will generate, however the reader can 
      read any of the formats listed below.
      
      mimetype: application/x-microsoft.net.object.binary.base64
      value   : The object must be serialized with 
              : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
              : and then encoded with base64 encoding.
      
      mimetype: application/x-microsoft.net.object.soap.base64
      value   : The object must be serialized with 
              : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
              : and then encoded with base64 encoding.
  
      mimetype: application/x-microsoft.net.object.bytearray.base64
      value   : The object must be serialized into a byte array 
              : using a System.ComponentModel.TypeConverter
              : and then encoded with base64 encoding.
      -->
  <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root" xmlns="">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral,
            PublicKeyToken=b77a5c561934e089
        </value>
  </resheader>
  <data name="{0} job started." xml:space="preserve">
    <value>{0} 작업이 시작되었습니다.</value>
  </data>
  <data name="{0} recognize completed." xml:space="preserve">
    <value>{0} 인식이 완료되었습니다.</value>
  </data>
  <data name="Attachement" xml:space="preserve">
    <value>첨부파일</value>
  </data>
  <data name="Choose files" xml:space="preserve">
    <value>파일 선택</value>
  </data>
  <data name="Content" xml:space="preserve">
    <value>콘텐츠</value>
  </data>
  <data name="Document Type" xml:space="preserve">
    <value>문서 유형</value>
  </data>
  <data name="Document type is required!" xml:space="preserve">
    <value>문서 유형이 필요합니다!</value>
  </data>
  <data name="Documents" xml:space="preserve">
    <value>서류</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>다운로드</value>
  </data>
  <data name="Is Public" xml:space="preserve">
    <value>공개임</value>
  </data>
  <data name="Only .jpg and .png files are allowed." xml:space="preserve">
    <value>.jpg 및 .png 파일만 허용됩니다.</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>소유자</value>
  </data>
  <data name="Please click [Choose Files] button to upload your photo." xml:space="preserve">
    <value>사진을 업로드하려면 [파일 선택] 버튼을 클릭하세요.</value>
  </data>
  <data name="Recognize result" xml:space="preserve">
    <value>결과를 인식</value>
  </data>
  <data name="Select Document Type" xml:space="preserve">
    <value>문서 유형 선택</value>
  </data>
  <data name="Tenant Name" xml:space="preserve">
    <value>테넌트 이름</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>제목</value>
  </data>
  <data name="Title is required!" xml:space="preserve">
    <value>제목은 필수입니다!</value>
  </data>
  <data name="Upload" xml:space="preserve">
    <value>업로드</value>
  </data>
  <data name="Upload Pictures" xml:space="preserve">
    <value>사진 업로드</value>
  </data>
  <data name="Upload successfully" xml:space="preserve">
    <value>성공적으로 업로드</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>상태</value>
  </data>
  <data name="Created By User" xml:space="preserve">
    <value>사용자가 생성</value>
  </data>
</root>