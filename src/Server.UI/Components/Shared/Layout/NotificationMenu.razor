@using CleanArchitecture.Blazor.Server.UI.Services.Notifications
@inherits MudComponentBase

@inject INotificationService NotificationService
@inject IStringLocalizer<NotificationMenu> L

<MudTooltip Arrow="true" Text="@L["Notification"]">
    <MudBadge Color="Color.Error" Dot="true" Overlap="true" Visible="_newNotificationsAvailable">
        <MudMenu Icon="@Icons.Material.Outlined.Notifications" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
            <div class="d-flex justify-space-between align-center px-2">
                <MudText Typo="Typo.subtitle2">@L["Notifications"]</MudText>
                <MudButton Disabled="@(_newNotificationsAvailable == false)" OnClick="MarkNotificationAsRead" StartIcon="@Icons.Material.Filled.DoneAll" Variant="Variant.Text" Color="Color.Primary" Class="ml-16 mr-n2">@L["Mark as read"]</MudButton>
            </div>
            @if (_messages != null && _newNotificationsAvailable)
            {
                @foreach (var (message, isRead) in _messages.Take(5))
                {
                    <MudMenuItem Class="px-2 py-0 rounded" Href="@($"/public/index/{message.Id}")">
                        <MudText Typo="Typo.subtitle2">@message.Title</MudText>
                        <MudText Typo="Typo.body2">@($"{message.Authors.FirstOrDefault()?.DisplayName} • {message.PublishDate:MM/dd/yyyy}")</MudText>
                    </MudMenuItem>
                    <MudDivider Class="my-2"/>
                }
            }
            else
            {
                <div class="d-flex justify-center align-center px-2 py-8 relative">
                    <MudText Class="mud-text-secondary my-12">@L["Nothing new :("]</MudText>
                    <MudBlazorLogo Class="docs-logo-filter mx-16 absolute" Style="filter: grayscale(1) opacity(.05);"/>
                </div>
            }
        </MudMenu>
    </MudBadge>
</MudTooltip>

@code
{
    private bool _newNotificationsAvailable = false;
    private IDictionary<NotificationMessage, bool>? _messages = null;

    private async Task MarkNotificationAsRead()
    {
        await NotificationService.MarkNotificationsAsRead();
        _newNotificationsAvailable = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _newNotificationsAvailable = await NotificationService.AreNewNotificationsAvailable();
            _messages = await NotificationService.GetNotifications();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}