@using CleanArchitecture.Blazor.Server.UI.Hubs
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@inject IStringLocalizer<UserLoginState> L
@implements IDisposable


@code {

    public void Dispose()
    {
        Client.LoginEvent -= _client_Login;
        Client.LogoutEvent -= _client_Logout;
        GC.SuppressFinalize(this);
    }


    [Inject] private HubClient Client { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private bool _canViewOnlineStatus;
    private bool _suppressLoginNotification;
    private readonly HashSet<string> _notifiedLoginUsers = new(StringComparer.Ordinal);

    protected override async Task OnInitializedAsync()
    {

        var state = await AuthState;
        _canViewOnlineStatus = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.ViewOnlineStatus)).Succeeded;
        _suppressLoginNotification = (await AuthService.AuthorizeAsync(state.User, Permissions.Users.SuppressLoginNotification)).Succeeded;
        Client.LoginEvent += _client_Login;
        Client.LogoutEvent += _client_Logout;


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await AuthState;
            if (state.User.Identity?.IsAuthenticated ?? false)
            {
                await Client.StartAsync();
            }
        }
    }
    private void _client_Login(object? sender, UserStateChangeEventArgs args)
    {
        if (!_canViewOnlineStatus) return;
        if (_suppressLoginNotification) return;
        // Deduplicate: only show once per user per session
        if (!_notifiedLoginUsers.Add(args.UserName)) return;

        InvokeAsync(() =>
        {
            Snackbar.Add(string.Format(L["{0} has logged in"], args.UserName), Severity.Info);
        });
    }

    private void _client_Logout(object? sender, UserStateChangeEventArgs args)
    {
        if (!_canViewOnlineStatus) return;

        InvokeAsync(() =>
        {
            Snackbar.Add(string.Format(L["{0} has logged out"], args.UserName));

        });
    }


}