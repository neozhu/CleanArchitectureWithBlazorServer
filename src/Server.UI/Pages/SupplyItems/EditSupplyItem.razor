@page "/pages/SupplyItems/edit/{id:int}"
@using CleanArchitecture.Blazor.Application.Features.SupplyItems.Commands.Update
@using CleanArchitecture.Blazor.Application.Features.SupplyItems.Mappers
@using CleanArchitecture.Blazor.Application.Features.SupplyItems.Queries.GetById
@using CleanArchitecture.Blazor.Server.UI.Components.Fusion

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<SupplyItems> L

<PageTitle>@Title</PageTitle>
<Breadcrumbs OnSaveButtonClick="Submit" Saving="_saving" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Small">
@if (model != null)
{
    <MudCard Class="pa-2">
        <MudCardHeader>
            <CardHeaderContent>
                 <MudText Typo="Typo.h6">@Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
        <ActiveUserSession PageComponent="@($"{nameof(EditSupplyItem)}/{ model.Id }")" />
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.ProductId)]" @bind-Value="model.ProductId" For="@(() => model.ProductId)" Min="0" Required="false" RequiredError="@L["product id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.SupplierId)]" @bind-Value="model.SupplierId" For="@(() => model.SupplierId)" Min="0" Required="false" RequiredError="@L["supplier id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.Quantity)]" @bind-Value="model.Quantity" For="@(() => model.Quantity)" Min="0" Required="false" RequiredError="@L["quantity is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.CostPerItem)]" @bind-Value="model.CostPerItem" For="@(() => model.CostPerItem)" Min="0.00m" Required="false" RequiredError="@L["cost per item is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Notes)]" @bind-Value="model.Notes" For="@(() => model.Notes)" Required="false" RequiredError="@L["notes is required!"]"></MudTextField>
                </MudItem> 

            </MudGrid>
        </MudForm>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-end gap-2">
                    <MudLoadingButton Color="Color.Primary" DropShadow="false" Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
        </MudCardActions>
        </MudCard>
    }
</MudContainer>
 

@code {
    public string? Title { get; private set; }
    [Parameter]
    public int Id { get; set; }
    MudForm? _form;
    private bool _saving = false;
    private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("SupplyItems", href: "/pages/SupplyItems")
    };
    private UpdateSupplyItemCommand? model;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Edit SupplyItem"];
        var result = await Mediator.Send(new GetSupplyItemByIdQuery() { Id = Id });
        result.Map(data =>
        {
            model = SupplyItemMapper.ToUpdateCommand(data);
            return data;
        }).Match(data =>
        {
            _breadcrumbItems.Add(new BreadcrumbItem(data.Id.ToString(), href: $"/pages/SupplyItems/edit/{Id}"));
            return data;
        }, errors =>
        {
            Snackbar.Add($"{errors}", Severity.Error);
            return null!;
        });

    }
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            result.Match(
                data=>
                {
                    Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                    return data;
                },
                errors=>
                {
                    Snackbar.Add(errors, MudBlazor.Severity.Error);
                    return 0;
                });
        }
        finally
        {
            _saving = false;
        }
    }
}
