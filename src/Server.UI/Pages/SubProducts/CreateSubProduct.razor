@page "/pages/SubProducts/create"
@using CleanArchitecture.Blazor.Application.Features.SubProducts.Commands.Create

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<SubProducts> L

<PageTitle>@Title</PageTitle>
<Breadcrumbs OnSaveButtonClick="Submit" Saving="_saving" BreadcrumbItems="_breadcrumbItems"></Breadcrumbs>
<MudContainer Class="mt-3" MaxWidth="MaxWidth.Small">
    <MudCard Class="pa-2">
        <MudCardHeader>
            <CardHeaderContent>
                 <MudText Typo="Typo.h6">@Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid Spacing="2">
                <MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.ProdId)]" @bind-Value="model.ProdId" For="@(() => model.ProdId)" Min="0" Required="false" RequiredError="@L["prod id is required!"]"></MudNumericField >
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Unit)]" @bind-Value="model.Unit" For="@(() => model.Unit)" Required="false" RequiredError="@L["unit is required!"]"></MudTextField>
                </MudItem> 
<MudItem xs="12" md="6"> 
                        <MudTextField Label="@L[model.GetMemberDescription(x=>x.Color)]" @bind-Value="model.Color" For="@(() => model.Color)" Required="false" RequiredError="@L["color is required!"]"></MudTextField>
                </MudItem> 

            </MudGrid>
        </MudForm>
        </MudCardContent>
         <MudCardActions Class="d-flex justify-end gap-2">
                    <MudLoadingButton Color="Color.Primary" DropShadow="false" Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
         </MudCardActions>
        </MudCard>
</MudContainer>
 

@code {
    public string? Title { get; private set; }
    MudForm? _form;
    private bool _saving = false;
    private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("SubProducts", href: "/pages/SubProducts"),
        new BreadcrumbItem("Create SubProduct", href:null, disabled:true)
    };
    private CreateSubProductCommand model = new();
    protected override Task OnInitializedAsync()
    {
        Title = L["Create SubProduct"];
        return Task.CompletedTask;
    }
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            result.Match(
                data=>
                {
                    Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                    Navigation.NavigateTo($"/pages/SubProducts");
                    return data;
                },
                errors=>
                {
                    Snackbar.Add(errors, MudBlazor.Severity.Error);
                    return -1;
                });
        }
        finally
        {
            _saving = false;
        }
    }
}