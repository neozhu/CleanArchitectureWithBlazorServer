@page "/pages/SubProducts/edit/{id:int}"
@using CleanArchitecture.Blazor.Application.Features.SubProducts.Commands.Update
@using CleanArchitecture.Blazor.Application.Features.SubProducts.Mappers
@using CleanArchitecture.Blazor.Application.Features.SubProducts.Queries.GetById
@using CleanArchitecture.Blazor.Server.UI.Components.Fusion

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<SubProducts> L

<PageTitle>@Title</PageTitle>

<Breadcrumbs OnSaveButtonClick="Submit" Saving="_saving" ></Breadcrumbs>


<MudContainer Class="mt-3" MaxWidth="MaxWidth.Small">
@if (model != null)
{
        <MudCard Class="pa-2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Title</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
                    <MudItem xs="12" sm="6">
                        <PicklistAutocomplete Picklist="Picklist.Unit" T="string"
                                              Label="@L["Unit"]"
                                              For="@(() => model.Unit)"
                                              ResetValueOnEmptyText="true"
                                              ShowProgressIndicator="true"
                                              Required="true" RequiredError="@L["unit is required!"]"
                                              @bind-Value="model.Unit">
                            <ProgressIndicatorTemplate>
                                <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                            </ProgressIndicatorTemplate>
                        </PicklistAutocomplete>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <PicklistAutocomplete Picklist="Picklist.Color" T="string"
                                              Label="@L["Color"]"
                                              For="@(() => model.Color)"
                                              ResetValueOnEmptyText="true"
                                              ShowProgressIndicator="true"
                                              Required="true" RequiredError="@L["color is required!"]"
                                              @bind-Value="model.Color">
                            <ProgressIndicatorTemplate>
                                <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                            </ProgressIndicatorTemplate>
                        </PicklistAutocomplete>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="@L["Price"]"
                                         T="decimal"
                                         Format="N2"
                                         For="@(() => model.Price)"
                                         Min="0.00m"
                                         @bind-Value="model.Price">
                        </MudNumericField>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField Label="@L["RetailPrice"]"
                                         T="decimal"
                                         Format="N2"
                                         For="@(() => model.RetailPrice)"
                                         Min="0.00m"
                                         @bind-Value="model.RetailPrice">
                        </MudNumericField>
                    </MudItem>

                </MudForm>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-end gap-2">
                <MudLoadingButton Color="Color.Primary" DropShadow="false" Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
            </MudCardActions>
        </MudCard>
    }
</MudContainer>
 

@code {
    public string? Title { get; private set; }
    [Parameter]
    public int Id { get; set; }
    MudForm? _form;
    private bool _saving = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    // private List<BreadcrumbItem> _breadcrumbItems = new List<BreadcrumbItem>
    // {
    //     new BreadcrumbItem("Home", href: "/"),
    //     new BreadcrumbItem("SubProducts", href: "/pages/SubProducts")
    // };
    private UpdateSubProductCommand? model;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Edit SubProduct"];
        var result = await Mediator.Send(new GetSubProductByIdQuery() { Id = Id });
        result.Map(data =>
        {
            model = SubProductMapper.ToUpdateCommand(data);

            return data;
        }).Match(data =>
        {
            //_breadcrumbItems.Add(new BreadcrumbItem(data.Id.ToString(), href: $"/pages/SubProducts/edit/{Id}"));
            return data;
        }, errors =>
        {
            Snackbar.Add($"{errors}", Severity.Error);
            return null!;
        });

    }
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            result.Match(
                data=>
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                    return data;
                },
                errors=>
                {
                    Snackbar.Add(errors, MudBlazor.Severity.Error);
                    return 0;
                });
        }
        finally
        {
            _saving = false;
        }
    }
}
