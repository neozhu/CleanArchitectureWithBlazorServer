@using CleanArchitecture.Blazor.Application.Features.Contacts.DTOs
@using CleanArchitecture.Blazor.Application.Features.Contacts.Queries.GetAll
@using CleanArchitecture.Blazor.Application.Features.Contacts.Queries.Pagination
@using CleanArchitecture.Blazor.Application.Features.Offers.Commands.AddEdit

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Offers> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>

                <MudItem xs="12" md="6"> 
                    <MudSelect T="ContactDto" Label="Select Contact" @bind-Value="SelectedContact">
                        @if (Contacts is not null)
                        {
                            @foreach (var contact in Contacts)
                            {
                                <MudSelectItem Label="@L[model.GetMemberDescription(x=>x.CustomerId)]"
                                Required="true"
                                RequiredError="@L["customer id is required!"]"
                                Value="contact">@contact.Name + " " + @contact.Description</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>

@*                 <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.CustomerId)]" @bind-Value="model.CustomerId" For="@(() => model.CustomerId)" Min="0" 
                    Required="false" RequiredError="@L["customer id is required!"]"></MudNumericField >
                </MudItem> *@
@*                 <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.TotalAmount)]" @bind-Value="model.TotalAmount" For="@(() => model.TotalAmount)" Min="0.00m" Required="false" RequiredError="@L["total amount is required!"]"></MudNumericField >
                </MudItem>  *@
                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.Status)]" 
                        @bind-Value="model.Status" For="@(() => model.Status)" Required="false" 
                        RequiredError="@L["status is required!"]"></MudTextField>
                </MudItem> 

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    AddEditOfferCommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEditOfferCommand model { get; set; } = null!;

    private IEnumerable<ContactDto>? Contacts;
    private ContactDto? SelectedContact;
    private GetAllContactsQuery Query { get; set; } = new();

    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediator.Send(Query).ConfigureAwait(false);
        if (result.Any()){
            Contacts = result.ToList();
        }

    }

    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;

            if (SelectedContact is null)
                return;

            model.CustomerId = SelectedContact.Id;

            var result = await Mediator.Send(model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await Mediator.Send(model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditOfferCommand() { };
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.FromResult(-1);
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}