@using CleanArchitecture.Blazor.Application.Features.Invoices.Commands.AddEdit
@using CleanArchitecture.Blazor.Server.UI.Pages.InvoiceLines
@using CleanArchitecture.Blazor.Application.Features.Suppliers.DTOs
@using CleanArchitecture.Blazor.Application.Features.Suppliers.Queries.GetAll

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Invoices> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>
                <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.OfferId)]" @bind-Value="model.OfferId" For="@(() => model.OfferId)" Min="0" Required="false" RequiredError="@L["offer id is required!"]"></MudNumericField >
                </MudItem> 
                
                <MudItem xs="12" md="6"> 
                    <MudDatePicker Label="@L[model.GetMemberDescription(x=>x.InvoiceDate)]" @bind-Date="model.InvoiceDate" For="@(() => model.InvoiceDate)" Required="false" RequiredError="@L["invoice date is required!"]"></MudDatePicker>
                </MudItem> 
                
                <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.TotalAmount)]" 
                        ReadOnly="true" @bind-Value="model.TotalAmount" For="@(() => model.TotalAmount)" Min="0.00m" 
                        Required="false" RequiredError="@L["total amount is required!"]">
                    </MudNumericField >
                </MudItem> 

                <MudItem xs="12" md="6"> 
                    <MudTextField Label="@L[model.GetMemberDescription(x=>x.Status)]"
                        @bind-Value="model.Status" For="@(() => model.Status)" 
                        Required="false" RequiredError="@L["status is required!"]">
                    </MudTextField>
                </MudItem> 

                                <MudItem xs="12" md="6">
                    <MudSelect T="SupplierDto"
                               Required="true" RequiredError="@L["Supplier id is required!"]"
                               Label="Select Supplier" @bind-Value="SelectedSupplier">
                        @if (SupplierDtos is not null)
                        {
                            @foreach (var supplier in SupplierDtos)
                            {
                                <MudSelectItem Value="supplier"
                                               Label="@($"{supplier.Name} {supplier.Email}")">
                                    @($"{supplier.Name} {supplier.Email}")
                                </MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" md="6">

                <PicklistAutocomplete Picklist="Picklist.InvoiceType" T="string"
                                      Label="@L["Invoice Type"]"
                                      For="@(() => model.Status)"
                                      ResetValueOnEmptyText="true"
                                      ShowProgressIndicator="true"
                                      @bind-Value="model.Status">
                    <ProgressIndicatorTemplate>
                        <MudProgressLinear Size="MudBlazor.Size.Small" Indeterminate="true" />
                    </ProgressIndicatorTemplate>
                </PicklistAutocomplete>
                </MudItem>

                @if (model.Id > 0)
                {
                    <MudItem xs="12"> 
                        <InvoiceLines InvoiceId="@model.Id"/>
                    </MudItem> 
                }

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    private SupplierDto SelectedSupplier { get; set; } = new();
    private IEnumerable<SupplierDto>? SupplierDtos;
    private GetAllSuppliersQuery Query { get; set; } = new();

    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    AddEditInvoiceCommandValidator _modelValidator = new ();
    [EditorRequired] [Parameter] public AddEditInvoiceCommand model { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediator.Send(Query).ConfigureAwait(false);

        if (!result.Any())
            return;

        SupplierDtos = result.ToList();

        SelectedSupplier = model.SupplierId > 0
             ? SupplierDtos.FirstOrDefault(x => x.Id == model.SupplierId)
             : SupplierDtos.FirstOrDefault();

    }

    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await Mediator.Send(model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditInvoiceCommand() { };
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.FromResult(-1);
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}