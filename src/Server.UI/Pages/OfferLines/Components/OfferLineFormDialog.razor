@using CleanArchitecture.Blazor.Application.Features.OfferLines.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.Products.DTOs
@using CleanArchitecture.Blazor.Application.Features.Products.Queries.GetAll

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<OfferLines> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>

                @*  <MudItem xs="12" md="6"> 
                        <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.ItemId)]" 
                            @bind-Value="model.ItemId" For="@(() => model.ItemId)" Min="0" Required="false" 
                            RequiredError="@L["item id is required!"]"></MudNumericField >
                </MudItem>  *@

                <MudItem xs="12">
                    <MudSelect T="int" Label="@L[model.GetMemberDescription(x => x.ItemId)]"
                    @bind-Value="model.ItemId"
                    Searchable="true"
                    SearchFunc="SearchContacts"
                    Required="true" RequiredError="@L["Item ID is required!"]">
                        @foreach (var product in productDtos)
                        {
                            <MudSelectItem T="int" Value="@product.Id">
                                <MudText Typo="Typo.body1">
                                    <span class="fw-bold">Code:</span> @product.Code |
                                    <span class="fw-bold">Name:</span> @product.Name
                                </MudText>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.Quantity)]" @bind-Value="model.Quantity" 
                    For="@(() => model.Quantity)" Min="0" Required="false" RequiredError="@L["quantity is required!"]"></MudNumericField >
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.Discount)]" @bind-Value="model.Discount" 
                    For="@(() => model.Discount)" Min="0.00m" Required="false" RequiredError="@L["discount is required!"]"></MudNumericField >
                </MudItem> 
                <MudItem xs="12" md="6"> 
                    <MudNumericField  Label="@L[model.GetMemberDescription(x=>x.LineTotal)]" @bind-Value="model.LineTotal" For="@(() => model.LineTotal)" Min="0.00m" Required="false" RequiredError="@L["line total is required!"]"></MudNumericField >
                </MudItem> 

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving"  OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    AddEditOfferLineCommandValidator _modelValidator = new ();
    [EditorRequired] 
    [Parameter] public AddEditOfferLineCommand model { get; set; } = null!;

    [Parameter] public Action? Refresh { get; set; }

    private IEnumerable<ProductDto> productDtos { get; set; } = new List<ProductDto>();

    protected override async Task OnInitializedAsync()
    {
        productDtos = await Mediator.Send(new GetAllProductsQuery());
    }

    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
               return;
            var result = await Mediator.Send(model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditOfferLineCommand() { };
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.FromResult(-1);
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}