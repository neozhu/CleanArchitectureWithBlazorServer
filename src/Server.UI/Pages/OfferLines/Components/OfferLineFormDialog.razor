@using CleanArchitecture.Blazor.Application.Features.OfferLines.Commands.AddEdit
@using CleanArchitecture.Blazor.Application.Features.OfferLines.Queries.GetById
@using CleanArchitecture.Blazor.Application.Features.Products.DTOs
@using CleanArchitecture.Blazor.Application.Features.Products.Queries.GetAll
@using System.Reactive.Linq
@using System.Reactive.Subjects
@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<OfferLines> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@_form" Validation="@(Validator.ValidateValue(model))">
            <MudGrid>

                <MudItem xs="12">
                    <MudSelect T="int" Label="@L[model.GetMemberDescription(x => x.ItemId)]"
                    @bind-Value="model.ItemId"
                    For="@(() => model.ItemId)"
                    Searchable="true"
                    SearchFunc="SearchContacts"
                    Required="true"
                    RequiredError="@L["Item ID is required!"]">
                        @foreach (var product in productDtos)
                        {
                            <MudSelectItem T="int" Value="@product.Id">
                                <MudText Typo="Typo.body1">
                                    <span class="fw-bold">Code:</span> @product.Code |
                                    <span class="fw-bold">Name:</span> @product.Name |
                                    <span class="fw-bold">Price:</span> @product.Price |
                                    <span class="fw-bold">Retail Price:</span> @product.RetailPrice
                                </MudText>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField Label="Retail Price"
                    @bind-Value="SelectedProduct.RetailPrice"
                    For="@(() => SelectedProduct.RetailPrice)"
                    ReadOnly="true">
                    </MudNumericField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField Label="Price"
                    @bind-Value="SelectedProduct.Price"
                    For="@(() => SelectedProduct.Price)"
                    ReadOnly="true">
                    </MudNumericField>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.LinePrice)]" @bind-Value="model.LinePrice"
                    For="@(() => model.LinePrice)" Min="0" Required="true" RequiredError="@L["LinePrice is required!"]"></MudNumericField>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.Quantity)]" @bind-Value="model.Quantity"
                    For="@(() => model.Quantity)" Min="0" Required="false" RequiredError="@L["quantity is required!"]"></MudNumericField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.Discount)]" @bind-Value="model.Discount"
                    For="@(() => model.Discount)" Min="0.00m" Required="false" RequiredError="@L["discount is required!"]"></MudNumericField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudNumericField Label="@L[model.GetMemberDescription(x=>x.LineTotal)]"
                    @bind-Value="model.LineTotal" For="@(() => model.LineTotal)" Min="0.00m"
                    Required="true" RequiredError="@L["line total is required!"]"></MudNumericField>
                </MudItem>

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingnew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? _form;
    private bool _saving = false;
    private bool _savingnew = false;
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    AddEditOfferLineCommandValidator _modelValidator = new();
    [EditorRequired]
    [Parameter] public AddEditOfferLineCommand model { get; set; } = null!;

    [Parameter] public Action? Refresh { get; set; }

    private IEnumerable<ProductDto> productDtos { get; set; } = new List<ProductDto>();
    private ProductDto? SelectedProduct { get; set; } = new ProductDto();

    private IDisposable? Subscription;

    protected override async Task OnInitializedAsync()
    {
        if (model.Id > 0)
        {
            var result = await Mediator.Send(new GetOfferLineByIdQuery() { Id = model.Id , OfferId= model.OfferId });
            result.Match(data => {
                model.OfferId = result?.Data?.OfferId ?? 0;
                model.ItemId = result?.Data?.ItemId ?? 0;
                model.LinePrice = result?.Data?.LinePrice ?? 0;
                model.Quantity = result?.Data?.Quantity ?? 0;
                model.LinePrice = result?.Data?.LinePrice ?? 0;
                model.Discount = result?.Data?.Discount ?? 0;
                return 1;

            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });

        }

        productDtos = await Mediator.Send(new GetAllProductsQuery());

        model.ItemIdBehaviorSubject.Subscribe(id =>
        {
            OnProductChanged(id);
        });
    }

    private void OnProductChanged(int productId)
    {
        if (productId == 0)
            return;

        SelectedProduct = productDtos.FirstOrDefault(p => p.Id == productId);

        if (model.Quantity == 0)
            model.Quantity = 1;

        this.model.LinePrice = SelectedProduct?.RetailPrice ?? 0;
    }

    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            result.Match(data =>
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return -1;
            });
        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingnew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(model);
            await result.MatchAsync(async data =>
            {
                Snackbar.Add(ConstantString.SaveSuccess, MudBlazor.Severity.Info);
                await Task.Delay(300);
                model = new AddEditOfferLineCommand() { };
                return data;
            }, errors =>
            {
                Snackbar.Add(errors, MudBlazor.Severity.Error);
                return Task.FromResult(-1);
            });
        }
        finally
        {
            _savingnew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();

}