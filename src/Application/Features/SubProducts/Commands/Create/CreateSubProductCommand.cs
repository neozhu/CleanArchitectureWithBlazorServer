//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-01-13
//     Last Modified: 2025-01-13
//     Description: 
//       This file defines the command and its handler for creating a new SubProduct entity
//       within the CleanArchitecture.Blazor application. The command uses caching
//       invalidation to ensure data consistency and raises domain events to maintain 
//       the integrity of the entity lifecycle. It leverages Clean Architecture principles 
//       for separation of concerns and encapsulation.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/subproduct
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// This command can be used to create a new subproduct entity in the system. It includes
// the required fields for the subproduct and automatically raises necessary domain
// events for integration with other bounded contexts in the application.

using CleanArchitecture.Blazor.Application.Features.Products.DTOs;
using CleanArchitecture.Blazor.Application.Features.SubProducts.Caching;
using CleanArchitecture.Blazor.Application.Features.SubProducts.Mappers;

namespace CleanArchitecture.Blazor.Application.Features.SubProducts.Commands.Create;

public class CreateSubProductCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
          [Description("Prod id")]
    public int ProdId {get;set;} 
    [Description("Unit")]
    public string? Unit {get;set;} 
    [Description("Color")]
    public string? Color {get;set;} 
    [Description("Product")]
    public ProductDto Product {get;set;} 

      public string CacheKey => SubProductCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => SubProductCacheKey.Tags;
}
    
    public class CreateSubProductCommandHandler : IRequestHandler<CreateSubProductCommand, Result<int>>
    {
        private readonly IApplicationDbContext _context;
        public CreateSubProductCommandHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }
        public async Task<Result<int>> Handle(CreateSubProductCommand request, CancellationToken cancellationToken)
        {
           var item = SubProductMapper.FromCreateCommand(request);
           // raise a create domain event
	       //item.AddDomainEvent(new SubProductCreatedEvent(item));
           _context.SubProducts.Add(item);
           await _context.SaveChangesAsync(cancellationToken);
           return  await Result<int>.SuccessAsync(item.Id);
        }
    }

