//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-01-13
//     Last Modified: 2025-01-13
//     Description: 
//       Defines a query for retrieving subproducts with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.SubProducts.DTOs;
using CleanArchitecture.Blazor.Application.Features.SubProducts.Caching;
using CleanArchitecture.Blazor.Application.Features.SubProducts.Mappers;
using CleanArchitecture.Blazor.Application.Features.SubProducts.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.SubProducts.Queries.Pagination;

public class SubProductsWithPaginationQuery : SubProductAdvancedFilter, ICacheableRequest<PaginatedData<SubProductDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public int ProductId { get;set; }
    public string CacheKey => SubProductCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => SubProductCacheKey.Tags;
    public SubProductAdvancedSpecification Specification => new SubProductAdvancedSpecification(this);
}
    
public class SubProductsWithPaginationQueryHandler :
         IRequestHandler<SubProductsWithPaginationQuery, PaginatedData<SubProductDto>>
{
        private readonly IApplicationDbContext _context;

        public SubProductsWithPaginationQueryHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<PaginatedData<SubProductDto>> Handle(SubProductsWithPaginationQuery request, CancellationToken cancellationToken)
        {

            try
            {
                var data = await _context.SubProducts.Include(x=>x.Product)
                            .Where(x => x.ProductId == request.ProductId)
                                                 .OrderBy($"{request.OrderBy} {request.SortDirection}")
                                                        .ProjectToPaginatedDataAsync(request.Specification,
                                                                                     request.PageNumber,
                                                                                     request.PageSize,
                                                                                     SubProductMapper.ToDto,
                                                                                     cancellationToken);
                return data;
            }
            catch (Exception ex)
            {
                var message = ex.Message;
                throw;
            }

        }
}