//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2024-11-12
//     Last Modified: 2024-11-12
//     Description: 
//       This file defines the Data Transfer Object (DTO) for the Contact entity 
//       used within the CleanArchitecture.Blazor application. The ContactDto is 
//       responsible for transferring data between layers while maintaining the 
//       structure and format required by application features like commands, queries, 
//       and views.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/contact
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// The `ContactDto` class is used to represent contact data throughout the CleanArchitecture.Blazor
// application, providing a well-defined contract for passing contact information between different 
// layers and services. Each property includes a description for better understandability during 
// serialization and documentation generation.

namespace CleanArchitecture.Blazor.Application.Features.Contacts.DTOs;

[Description("Contacts")]
public class ContactDto
{
    [Description("Id")]
    public int Id { get; set; }
    [Description("Name")]
    public string Name { get; set; }
    [Description("Description")]
    public string? Description { get; set; }
    [Description("Email")]
    public string? Email { get; set; }
    [Description("Phone number")]
    public string? PhoneNumber { get; set; }
    [Description("Country")]
    public string? Country { get; set; }
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<Contact, ContactDto>();
            CreateMap<ContactDto, Contact>()
            .ForMember(dest => dest.Created, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedBy, opt => opt.Ignore())
            .ForMember(dest => dest.LastModified, opt => opt.Ignore())
            .ForMember(dest => dest.LastModifiedBy, opt => opt.Ignore())
            .ForMember(dest => dest.DomainEvents, opt => opt.Ignore());
        }
    }

}

