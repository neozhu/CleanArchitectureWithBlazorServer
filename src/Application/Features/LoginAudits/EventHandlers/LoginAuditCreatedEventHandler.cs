//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-03-19
// Handles LoginAuditCreatedEvent: triggered when a new contact is created.
// Extendable for additional actions (e.g., notifications, system updates).
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Domain.Enums;
using CleanArchitecture.Blazor.Domain.Identity;
using DocumentFormat.OpenXml.Office2016.Drawing.ChartDrawing;
using Microsoft.Extensions.DependencyInjection;
using ZiggyCreatures.Caching.Fusion;

namespace CleanArchitecture.Blazor.Application.Features.LoginAudits.EventHandlers;

public class LoginAuditCreatedEventHandler : INotificationHandler<LoginAuditCreatedEvent>
{
    private readonly IGeolocationService _geolocationService;
    private readonly IServiceScopeFactory _scopeFactory;

    private readonly ILogger<LoginAuditCreatedEventHandler> _logger;
    private readonly ISecurityAnalysisService _securityAnalysisService;

    public LoginAuditCreatedEventHandler(
        IGeolocationService geolocationService,
        IServiceScopeFactory scopeFactory,
        ILogger<LoginAuditCreatedEventHandler> logger,
        ISecurityAnalysisService securityAnalysisService)
    {
        _geolocationService = geolocationService;
        _scopeFactory = scopeFactory;
        _logger = logger;
        _securityAnalysisService = securityAnalysisService;
    }

    public async Task Handle(LoginAuditCreatedEvent notification, CancellationToken cancellationToken)
    {
        //_logger.LogInformation("Handled domain event '{EventType}' with notification: {@Notification} ", notification.GetType().Name, notification);

        if (!string.IsNullOrEmpty(notification.Item.IpAddress) && !notification.Item.IpAddress.StartsWith("127") && string.IsNullOrEmpty(notification.Item.Region))
        {
            var geolocation = await _geolocationService.GetGeolocationAsync(notification.Item.IpAddress, cancellationToken);
            if (geolocation != null)
            {
                var regionParts = new List<string>();

                if (!string.IsNullOrEmpty(geolocation.City))
                    regionParts.Add(geolocation.City);

                if (!string.IsNullOrEmpty(geolocation.Region))
                    regionParts.Add(geolocation.Region);

                if (!string.IsNullOrEmpty(geolocation.CountryName))
                    regionParts.Add(geolocation.CountryName);
                else if (!string.IsNullOrEmpty(geolocation.Country))
                    regionParts.Add(geolocation.Country);

                var region = regionParts.Count > 0 ? string.Join(", ", regionParts) : null;
                var dbcntext = _scopeFactory.CreateScope().ServiceProvider.GetRequiredService<IApplicationDbContext>();
                await dbcntext.LoginAudits.Where(x => x.Id == notification.Item.Id).ExecuteUpdateAsync(x => x.SetProperty(y => y.Region, region));
            }
        }

        // Analyze account security using the dedicated service
        await _securityAnalysisService.AnalyzeUserSecurityAsync(notification.Item, cancellationToken);
    }
}
