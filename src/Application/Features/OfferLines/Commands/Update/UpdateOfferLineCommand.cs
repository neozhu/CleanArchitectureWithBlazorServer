//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under one or more agreements.
//     The .NET Foundation licenses this file to you under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2024-12-13
//     Last Modified: 2024-12-13
//     Description: 
//       This file defines the UpdateOfferLineCommand and its handler for updating 
//       an existing OfferLine entity within the CleanArchitecture.Blazor application. 
//       It includes caching invalidation logic to maintain data consistency and 
//       raises a domain event upon successful update to notify other parts of the system.
//     
//     Documentation:
//       https://docs.cleanarchitectureblazor.com/features/offerline
// </auto-generated>
//------------------------------------------------------------------------------

// Usage:
// Use `UpdateOfferLineCommand` to update an existing offerline entity in the system. 
// The handler ensures that if the entity is found, the changes are applied and 
// the necessary domain event (`OfferLineUpdatedEvent`) is raised. Caching is also 
// invalidated to keep the offerline list consistent.

using CleanArchitecture.Blazor.Application.Features.OfferLines.Caching;
using CleanArchitecture.Blazor.Application.Features.OfferLines.Mappers;

namespace CleanArchitecture.Blazor.Application.Features.OfferLines.Commands.Update;

public class UpdateOfferLineCommand: ICacheInvalidatorRequest<Result<int>>
{
      [Description("Id")]
      public int Id { get; set; }
            [Description("Offer id")]
    public int OfferId {get;set;} 
    [Description("Item id")]
    public int ItemId {get;set;} 
    [Description("Quantity")]
    public int Quantity {get;set;} 
    [Description("Discount")]
    public decimal Discount {get;set;} 
    [Description("Line total")]
    public decimal LineTotal {get;set;} 

      public string CacheKey => OfferLineCacheKey.GetAllCacheKey;
      public IEnumerable<string>? Tags => OfferLineCacheKey.Tags;

}

public class UpdateOfferLineCommandHandler : IRequestHandler<UpdateOfferLineCommand, Result<int>>
{
    private readonly IApplicationDbContext _context;
    public UpdateOfferLineCommandHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }
    public async Task<Result<int>> Handle(UpdateOfferLineCommand request, CancellationToken cancellationToken)
    {

        //   var item = await _context.OfferLines.FindAsync(request.Id, cancellationToken);
        //   if (item == null)
        //   {
        //       return await Result<int>.FailureAsync($"OfferLine with id: [{request.Id}] not found.");
        //   }
        //   OfferLineMapper.ApplyChangesFrom(request, item);
        // // raise a update domain event
        //item.AddDomainEvent(new OfferLineUpdatedEvent(item));
        //   await _context.SaveChangesAsync(cancellationToken);
        //   return await Result<int>.SuccessAsync(item.Id);

        return await Result<int>.SuccessAsync(0);
    }
}

