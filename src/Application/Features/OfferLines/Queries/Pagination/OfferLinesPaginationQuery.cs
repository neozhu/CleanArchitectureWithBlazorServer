//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2024-12-13
//     Last Modified: 2024-12-13
//     Description: 
//       Defines a query for retrieving offerlines with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.OfferLines.DTOs;
using CleanArchitecture.Blazor.Application.Features.OfferLines.Caching;
using CleanArchitecture.Blazor.Application.Features.OfferLines.Mappers;
using CleanArchitecture.Blazor.Application.Features.OfferLines.Specifications;
using DocumentFormat.OpenXml.InkML;

namespace CleanArchitecture.Blazor.Application.Features.OfferLines.Queries.Pagination;

public class OfferLinesWithPaginationQuery : OfferLineAdvancedFilter, ICacheableRequest<PaginatedData<OfferLineDto>>
{
    public override string ToString()
    {
        return $"Listview:{ListView}:{CurrentUser?.UserId}-{LocalTimezoneOffset.TotalHours}, Search:{Keyword}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    public string CacheKey => OfferLineCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => OfferLineCacheKey.Tags;
    public OfferLineAdvancedSpecification Specification => new OfferLineAdvancedSpecification(this);
}
    
public class OfferLinesWithPaginationQueryHandler :
         IRequestHandler<OfferLinesWithPaginationQuery, PaginatedData<OfferLineDto>>
{
        private readonly IApplicationDbContext _context;

        public OfferLinesWithPaginationQueryHandler(
            IApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<PaginatedData<OfferLineDto>> Handle(OfferLinesWithPaginationQuery request, CancellationToken cancellationToken)
    {

        //var data = await _context.Offers
        //    .Include(o => o.OfferLines) // Ensure OfferLines are included
        //    .SelectMany(o => o.OfferLines)
        //    //.Where(request.Specification.ToExpression()) // Apply the specification
        //    .ProjectToPaginatedDataAsync(request.Specification,
        //        request.PageNumber,
        //        request.PageSize,
        //        OfferLineMapper.ToDto,
        //        cancellationToken
        //    );

        //var data1 = await _context.OfferLines.OrderBy($"{request.OrderBy} {request.SortDirection}")
        //                                        .ProjectToPaginatedDataAsync(request.Specification,
        //                                                                     request.PageNumber,
        //                                                                     request.PageSize,
        //                                                                     OfferLineMapper.ToDto,
        //                                                                     cancellationToken);
        return null;
        }
}