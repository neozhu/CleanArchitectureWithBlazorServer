//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2024-12-13
//     Last Modified: 2024-12-13
//     Description: 
//       Defines a query to retrieve a offerline by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same offerline.
// </auto-generated>
//------------------------------------------------------------------------------

using CleanArchitecture.Blazor.Application.Features.OfferLines.DTOs;
using CleanArchitecture.Blazor.Application.Features.OfferLines.Caching;
using CleanArchitecture.Blazor.Application.Features.OfferLines.Mappers;
using CleanArchitecture.Blazor.Application.Features.OfferLines.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.OfferLines.Queries.GetById;

public class GetOfferLineByIdQuery : ICacheableRequest<Result<OfferLineDto>>
{
   public required int Id { get; set; }
   public string CacheKey => OfferLineCacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => OfferLineCacheKey.Tags;
}

public class GetOfferLineByIdQueryHandler :
     IRequestHandler<GetOfferLineByIdQuery, Result<OfferLineDto>>
{
    private readonly IApplicationDbContext _context;

    public GetOfferLineByIdQueryHandler(
        IApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<Result<OfferLineDto>> Handle(GetOfferLineByIdQuery request, CancellationToken cancellationToken)
    {
        //var data = await _context.OfferLines.ApplySpecification(new OfferLineByIdSpecification(request.Id))
        //                                        .ProjectTo()
        //                                        .FirstAsync(cancellationToken);

        var data = await _context.Offers
             .SelectMany(o => o.OfferLines)
             .ApplySpecification(new OfferLineByIdSpecification(request.Id))
             .ProjectTo()
             .FirstAsync(cancellationToken);

        return await Result<OfferLineDto>.SuccessAsync(data);
    }
}
