# Clean Architecture Blazor Server Project Rules (v1.1)
> Maintainer: [Fill in]  Last Updated: 2024-06-XX

---

## Table of Contents
1. Project Structure & Layer Dependencies (A-1)
2. Service & Interface Rules (A-2)
3. Data Access & CQRS (A-3)
4. Configuration & Constants (A-4)
5. Blazor Component Standards (A-5)
6. Dependency Injection & Registration (A-6)
7. Testing & Documentation (A-7)
8. Security & Permissions (A-8)
9. Performance & Optimization (A-9)
10. Pre-commit Checklist (A-10)

---

## 1. Project Structure & Layer Dependencies (A-1)

**Authoritative Project Structure:**
- The canonical project structure is defined by the solution file: `CleanArchitecture.Blazor.slnx`.
- All architectural and code rules must align with the structure and boundaries established in this solution file.

**Solution Layout (from CleanArchitecture.Blazor.slnx):**
```
/Solution Items/
  - .dockerignore
  - .editorconfig
  - .gitignore
  - CleanArchitecture.Blazor.nuspec
  - Dockerfile
  - README.md
/src/
  - Application/Application.csproj
  - Domain/Domain.csproj
  - Infrastructure/Infrastructure.csproj
  - Server.UI/Server.UI.csproj
/src/Migrators/
  - Migrators.MSSQL/Migrators.MSSQL.csproj
  - Migrators.PostgreSQL/Migrators.PostgreSQL.csproj
  - Migrators.SqLite/Migrators.SqLite.csproj
/tests/
  - Application.IntegrationTests/Application.IntegrationTests.csproj
  - Application.UnitTests/Application.UnitTests.csproj
  - Domain.UnitTests/Domain.UnitTests.csproj
docker-compose.dcproj
```

**Feature-to-UI Mapping:**
- For each business feature, there is a corresponding folder/object in `Application/Features/<FeatureName>/` and a web UI implementation in `Pages/<FeatureName>/`.
- Example:
  - Application logic: `src/Application/Features/Contacts/`
  - Web UI: `src/Server.UI/Pages/Contacts/`

**Allowed Dependencies:**
```
UI → Application → Domain
Infrastructure → Application → Domain
```

**Forbidden Dependencies:**
- Application → Infrastructure
- Application → UI
- Domain → Application
- Domain → Infrastructure
- Domain → UI
- UI → Infrastructure (except Program.cs for DI)

**Anti-pattern Example:**
```csharp
// ❌ UI layer referencing Infrastructure.Services
@inject Infrastructure.Services;
```
**Correct Pattern:**
```csharp
// ✅ Inject via Application layer interface
@inject IYourService YourService
```

---

## 2. Service & Interface Rules (A-2)
- All service interfaces must be defined in `src/Application/Common/Interfaces/`.
- Implementations go in `src/Infrastructure/Services/`.
- Register services in `Infrastructure/DependencyInjection.cs`:
  ```csharp
  services.AddScoped<IYourService, YourService>();
  ```
- Never implement services directly in the UI layer; always use interfaces.

---

## 3. Data Access & CQRS (A-3)
- All data access must use CQRS (MediatR).
- All database access must use `IApplicationDbContextFactory.CreateAsync` to obtain a DbContext instance. Never inject or instantiate DbContext directly in UI or Application layers.
- UI layer must never access DbContext directly.
- Use ProjectTo, paging, and caching for query optimization.
- Example:
  ```csharp
  // ✅ Application layer
  public record GetUsersQuery : IRequest<List<UserDto>>;
  // UI layer
  var users = await Mediator.Send(new GetUsersQuery());
  // To access DbContext in handlers:
  await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
  ```
- Anti-pattern:
  ```csharp
  // ❌ UI layer direct DbContext access
  @inject ApplicationDbContext Context
  var users = await Context.Users.ToListAsync();
  // ❌ Direct new or injection of DbContext
  var dbContext = new ApplicationDbContext(...);
  [Inject] public ApplicationDbContext Db { get; set; }
  ```

---

## 4. Configuration & Constants (A-4)
- Use IOptions<T> for configuration. Define interfaces in Application, implement and register in Infrastructure.
- Place all constants and permissions in `Application/Common/Constants/` and `Application/Common/Security/`.
- Example:
  ```csharp
  // Application/Common/Interfaces/IAppSettings.cs
  public interface IAppSettings { string SomeProp { get; } }
  // Infrastructure/Configurations/AppSettings.cs
  public class AppSettings : IAppSettings { ... }
  // Registration
  services.Configure<AppSettings>(config.GetSection(AppSettings.Key))
      .AddSingleton<IAppSettings>(s => s.GetRequiredService<IOptions<AppSettings>>().Value);
  ```
- Never inject IConfiguration directly in the UI layer.

---

## 5. Blazor Component Standards (A-5)
- Standard injections in `_Imports.razor`:
  ```csharp
  @inject IApplicationSettings ApplicationSettings
  @inject ISnackbar Snackbar
  @inject IDialogService DialogService
  @inject IValidationService Validator
  @inject IJSRuntime JS
  @inject IMediator Mediator
  @inject NavigationManager Navigation
  @inject IPermissionService PermissionService
  @inject IMapper Mapper
  ```
- Never inject DbContext or IConfiguration in UI components.
- Organize components by feature. Example (actual Contacts structure):
  ```
  Pages/
    Contacts/
      Contacts.razor
      CreateContact.razor
      EditContact.razor
      ViewContact.razor
      Components/
        ContactFormDialog.razor
  ```
- Other features (e.g., Products, Identity/Users) follow a similar pattern: a main feature folder, main page(s), and a Components subfolder for reusable UI parts.
- Authorization usage:
  ```csharp
  @attribute [Authorize(Policy = Permissions.Products.View)]
  ```
- Localization usage:
  ```csharp
  @inject IStringLocalizer<YourComponent> L
  <MudText>@L["Your localized text"]</MudText>
  ```

---

## 6. Dependency Injection & Registration (A-6)
- Application layer registers MediatR, FluentValidation:
  ```csharp
  // Application/DependencyInjection.cs
  services.AddMediatR(config => { /* ... */ });
  services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());
  ```
- Infrastructure layer registers services and configuration:
  ```csharp
  // Infrastructure/DependencyInjection.cs
  services.AddScoped<IUserService, UserService>();
  services.Configure<DatabaseSettings>(config.GetSection("DatabaseSettings"));
  ```
- UI layer registers UI-related services:
  ```csharp
  // Server.UI/DependencyInjection.cs
  services.AddScoped<IPermissionHelper, PermissionHelper>();
  services.AddMudServices();
  ```

---

## 7. Testing & Documentation (A-7)
- Use Arrange-Act-Assert for unit tests.
- All public APIs must have XML documentation.
- Test example:
  ```csharp
  [Test]
  public async Task Handle_ValidCommand_ShouldCreateUser()
  {
      // Arrange
      var command = new CreateUserCommand { /* ... */ };
      // Act
      var result = await _handler.Handle(command, CancellationToken.None);
      // Assert
      result.Succeeded.Should().BeTrue();
  }
  ```
- XML doc example:
  ```csharp
  /// <summary>
  /// Get user info.
  /// </summary>
  /// <param name="id">User ID</param>
  /// <returns>User info</returns>
  public async Task<Result<UserDto>> GetUserAsync(string id)
  ```

---

## 8. Security & Permissions (A-8)
- Define all permission constants in `Application/Common/Security/Permissions/`.
- For feature-level permission checks in Blazor components, use access rights objects with `PermissionService.GetAccessRightsAsync<TAccessRights>()`. Example:
  ```csharp
  // In OnInitializedAsync or a method
  _accessRights = await PermissionService.GetAccessRightsAsync<ContactsAccessRights>();
  if (_accessRights.Create)
  {
      // ... show create button, etc.
  }
  ```
- For single permission checks, you can use:
  ```csharp
  var hasPermission = await PermissionService.HasPermissionAsync(Permissions.Users.Create);
  if (hasPermission)
  {
      // ...
  }
  ```
- Page-level authorization:
  ```csharp
  @attribute [Authorize(Policy = Permissions.Users.View)]
  ```
- Never use IAuthorizationService directly for permission checks in UI.

---

## 9. Performance & Optimization (A-9)
- Use FusionCache for caching.
- Optimize queries with ProjectTo, paging, and selecting only required fields.
- Use FluentValidation for input validation.
- Example:
  ```csharp
  public class CreateUserCommandValidator : AbstractValidator<CreateUserCommand>
  {
      public CreateUserCommandValidator()
      {
          RuleFor(x => x.Email).NotEmpty().EmailAddress();
      }
  }
  ```

---

## 10. Pre-commit Checklist (A-10)
- [ ] No UI layer dependency on Infrastructure (except Program.cs)
- [ ] All services have interfaces in Application layer
- [ ] No direct DbContext access in UI
- [ ] No IConfiguration injection in UI
- [ ] All constants and permissions in Application layer
- [ ] Use Result pattern for error handling
- [ ] XML documentation for public APIs
- [ ] Unit tests for new business logic
- [ ] Authorization attributes on new pages/components

---

> For more details and anti-patterns, see code blocks in each section. Add team-specific conventions as needed.
